[{"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\index.js":"1","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\Idiky.js":"2","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\routers\\Main.js":"3","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\store.js":"4","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\routers\\Internal.js":"5","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\TmpImg.js":"6","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\LoadLocals.js":"7","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Counter.js":"8","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\Home.js":"9","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Brands.js":"10","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Divipola.js":"11","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Suppliers.js":"12","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Categories.js":"13","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\login\\LoginScreen.js":"14","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\Admin.js":"15","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\data\\Locals.js":"16","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_home\\Cont2.js":"17","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_home\\Cont1.js":"18","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_home\\Cont3.js":"19","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\Content.js":"20","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\Menu.js":"21","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\TopToolBar.js":"22","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\actions\\Connect.js":"23","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\Board.js":"24","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\categories\\ListCategories.js":"25","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\imagentmp\\ListImagenTmp.js":"26","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\suppliers\\ListSuppliers.js":"27","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\brands\\ListBrands.js":"28","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\MobilMenu.js":"29","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Email.js":"30","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Alert.js":"31","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Account.js":"32","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Title.js":"33","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\brands\\FormBrands.js":"34","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\modals.js":"35","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\upload.js":"36","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\cloudinary.js":"37","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\suppliers\\FormSuppliers.js":"38","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\categories\\FormCategories.js":"39","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\divipola.js":"40"},{"size":370,"mtime":1660660073922,"results":"41","hashOfConfig":"42"},{"size":314,"mtime":1660660073781,"results":"43","hashOfConfig":"42"},{"size":1630,"mtime":1660660073945,"results":"44","hashOfConfig":"42"},{"size":786,"mtime":1660660073951,"results":"45","hashOfConfig":"42"},{"size":652,"mtime":1660660073944,"results":"46","hashOfConfig":"42"},{"size":391,"mtime":1660660073951,"results":"47","hashOfConfig":"42"},{"size":553,"mtime":1660660073950,"results":"48","hashOfConfig":"42"},{"size":435,"mtime":1660660073949,"results":"49","hashOfConfig":"42"},{"size":2459,"mtime":1660660073922,"results":"50","hashOfConfig":"42"},{"size":535,"mtime":1660660073948,"results":"51","hashOfConfig":"42"},{"size":677,"mtime":1660660073949,"results":"52","hashOfConfig":"42"},{"size":506,"mtime":1661286723868,"results":"53","hashOfConfig":"42"},{"size":629,"mtime":1660660073949,"results":"54","hashOfConfig":"42"},{"size":414,"mtime":1660660073922,"results":"55","hashOfConfig":"42"},{"size":1730,"mtime":1660660073922,"results":"56","hashOfConfig":"42"},{"size":4929,"mtime":1660660073947,"results":"57","hashOfConfig":"42"},{"size":1451,"mtime":1660660073942,"results":"58","hashOfConfig":"42"},{"size":1093,"mtime":1660660073942,"results":"59","hashOfConfig":"42"},{"size":642,"mtime":1660660073943,"results":"60","hashOfConfig":"42"},{"size":1196,"mtime":1660660073922,"results":"61","hashOfConfig":"42"},{"size":4107,"mtime":1660660073922,"results":"62","hashOfConfig":"42"},{"size":2916,"mtime":1660660073922,"results":"63","hashOfConfig":"42"},{"size":684,"mtime":1660660073946,"results":"64","hashOfConfig":"42"},{"size":397,"mtime":1660660073922,"results":"65","hashOfConfig":"42"},{"size":5516,"mtime":1660660073922,"results":"66","hashOfConfig":"42"},{"size":3673,"mtime":1660660073937,"results":"67","hashOfConfig":"42"},{"size":8010,"mtime":1660660073938,"results":"68","hashOfConfig":"42"},{"size":8723,"mtime":1660660073922,"results":"69","hashOfConfig":"42"},{"size":3157,"mtime":1660660073941,"results":"70","hashOfConfig":"42"},{"size":433,"mtime":1660660073940,"results":"71","hashOfConfig":"42"},{"size":470,"mtime":1660660073940,"results":"72","hashOfConfig":"42"},{"size":1452,"mtime":1660660073939,"results":"73","hashOfConfig":"42"},{"size":938,"mtime":1660660073941,"results":"74","hashOfConfig":"42"},{"size":9605,"mtime":1660660073922,"results":"75","hashOfConfig":"42"},{"size":656,"mtime":1660660073922,"results":"76","hashOfConfig":"42"},{"size":3856,"mtime":1660660073922,"results":"77","hashOfConfig":"42"},{"size":870,"mtime":1660660073922,"results":"78","hashOfConfig":"42"},{"size":12284,"mtime":1661287596593,"results":"79","hashOfConfig":"42"},{"size":5718,"mtime":1661283925684,"results":"80","hashOfConfig":"42"},{"size":4027,"mtime":1661286620764,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"4mh0kt",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"84"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\index.js",[],["169","170"],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\Idiky.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\routers\\Main.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\store.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\routers\\Internal.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\TmpImg.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\LoadLocals.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Counter.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\Home.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Brands.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Divipola.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Suppliers.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\states\\Categories.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\login\\LoginScreen.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\Admin.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\data\\Locals.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_home\\Cont2.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_home\\Cont1.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_home\\Cont3.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\Content.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\Menu.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\TopToolBar.js",["171","172"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Title} from './top_bar/Title';\r\nimport {Email} from './top_bar/Email';\r\nimport {Alert} from './top_bar/Alert';\r\nimport {Acount} from './top_bar/Account';\r\nimport {MobilMenu} from './top_bar/MobilMenu';\r\n\r\nexport default function TopToolBar({handleDrawerToggle, params}) {\r\n\r\n      const useStyles = makeStyles((theme) => ({\r\n        grow: {\r\n          flexGrow: 1,\r\n        },\r\n\r\n        menuButton: {\r\n          marginRight: theme.spacing(2),\r\n          [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n          },\r\n        },\r\n      \r\n        sectionDesktop: {\r\n          display: 'none',\r\n          [theme.breakpoints.up('md')]: {\r\n            display: 'flex',\r\n          },\r\n        }\r\n\r\n      }));\r\n\r\n      const classes = useStyles();\r\n      const [anchorEl, setAnchorEl] = React.useState(null);\r\n      const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n      const isMenuOpen = Boolean(anchorEl);\r\n      const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n    \r\n      const handleProfileMenuOpen = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        handleMobileMenuClose();\r\n      };\r\n    \r\n      const handleMobileMenuClose = () => {\r\n        setMobileMoreAnchorEl(null);\r\n      };\r\n    \r\n      const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n        handleMobileMenuClose();\r\n      };\r\n    \r\n      const handleMobileMenuOpen = (event) => {\r\n        setMobileMoreAnchorEl(event.currentTarget);\r\n      };\r\n \r\n    return (\r\n        <div className={classes.grow}>\r\n            <Toolbar>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"open drawer\"\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Title params={params}/>\r\n                <div className={classes.grow} />\r\n                <div className={classes.sectionDesktop}>\r\n                    <Email/>\r\n                    <Alert/>\r\n                    <Acount handleProfileMenuOpen={handleProfileMenuOpen.bind(this)} handleMenuClose={handleMenuClose.bind(this)} isMobileMenuOpen={isMobileMenuOpen} isMenuOpen={isMenuOpen} anchorEl={anchorEl} />  \r\n                </div>\r\n                {\r\n                //<MobilMenu handleProfileMenuOpen={handleProfileMenuOpen.bind(this)} handleMobileMenuOpen={handleMobileMenuOpen.bind(this)} handleMobileMenuClose={handleMobileMenuClose.bind(this)} isMobileMenuOpen={isMobileMenuOpen} mobileMoreAnchorEl={mobileMoreAnchorEl} />\r\n            }\r\n            \r\n            </Toolbar>\r\n        </div>\r\n    );\r\n}","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\stores\\actions\\Connect.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\Board.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\categories\\ListCategories.js",["173","174"],"import React, {useEffect, useState} from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport {Button, Row, Col,  Card, CardHeader, CardBody, Table, Input } from 'reactstrap';\r\nimport {Connect} from \"../../../../../stores/actions/Connect\"\r\nimport { Image, Transformation } from 'cloudinary-react';\r\nimport { CloudinaryContext } from \"cloudinary-react\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { addCategories, changeFlagCategories } from '../../../../../stores/states/Categories';\r\nimport {useSelector} from 'react-redux';\r\nimport { FormCategories } from './FormCategories';\r\nimport { Modals } from '../../../../../components/cross/modals';\r\n\r\n\r\nexport const ListCategories = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const stateCategories = useSelector(state => state.categories);\r\n\r\n    const [rowTable, setRowTable] = useState(<tr></tr>);\r\n    const [list, setList] = useState(true);\r\n    const [data, setData] = useState({});\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const imgDefault = (url) => {\r\n        return (<CloudinaryContext cloudName=\"idikydev\" uploadPreset=\"bobSeller\">\r\n                <Image publicId={url} > \r\n                    <Transformation width=\"50\" crop=\"scale\" /> \r\n                </Image>\r\n              </CloudinaryContext>)\r\n    }\r\n\r\n    const callBackEraseDB  = (data) => {\r\n        dispatch(changeFlagCategories(false));\r\n    }\r\n\r\n    const callBackErase = () => {\r\n        setModal(false);\r\n        Connect('categories/delete', {id:data._id, urlIcon:data.urlIcon, urlImage:data.urlImage, source:\"categories\"}, 'POST', callBackEraseDB.bind(this) );\r\n    }\r\n\r\n    const callBack = (data) => {\r\n        dispatch(addCategories(data));\r\n        buildTable(data);\r\n     }\r\n\r\n    const buildTable = (data) => {\r\n        const table = data.map( (row)  => {\r\n            return (\r\n            <tr key={row._id}>\r\n                <th scope=\"row\" className=\"align-items-center\">{row._id}</th>\r\n                <td>{row.name}</td>\r\n                <td>{row.description}</td>\r\n                <td>{imgDefault(row.urlIcon)}</td>\r\n                <td>{imgDefault(row.urlImage)}</td>\r\n                <td>\r\n                    <div>\r\n                        <EditIcon style={{cursor:\"pointer\"}} onClick={() => {\r\n                            setData(row);\r\n                            setList(false);\r\n                        }}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <DeleteIcon style={{cursor:\"pointer\"}} onClick={() => {\r\n                            setData(row);\r\n                            setModal(true);\r\n                        }}/>\r\n                    </div>\r\n                </td>\r\n            </tr>)\r\n       });\r\n       setRowTable(table);\r\n    }\r\n    \r\n    useEffect(() => { \r\n        if(!stateCategories.flagCategories) Connect('categories/list', null, 'GET', callBack.bind(this) );\r\n        else buildTable(stateCategories.allCategories);\r\n    },[stateCategories.flagCategories]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (list)\r\n                &&<Row>\r\n                    <Col xs=\"12\" md=\"12\">\r\n                    <Row>\r\n                        <Col xs=\"12\" md=\"12\">\r\n                        <Card>\r\n                            <CardHeader>\r\n                            <Row className=\"align-items-center\">\r\n                                <Col xs=\"10\" sm=\"10\" md=\"10\">Listado de Marcas</Col>\r\n                                <Col xs=\"2\" sm=\"2\" md=\"2\">\r\n                                <Button size=\"sm\" style={{fontSize:\"medium\"}} onClick={() => {\r\n                                    setData({});\r\n                                    setList(false);\r\n                                }} block className=\"float-right btn btn-success active\">\r\n                                    Crear\r\n                                </Button>\r\n                                </Col>\r\n                            </Row>\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                <Row className=\"align-items-center\">\r\n                                <Table striped>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Id</th>\r\n                                            <th>Nombre</th>\r\n                                            <th>Descripción</th>\r\n                                            <th>Icon</th>\r\n                                            <th>Imagen</th>\r\n                                            <th>Editar</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {rowTable}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (!list)\r\n                &&<FormCategories setlist={setList.bind(this)} dataRow={data}/>\r\n            }\r\n\r\n            <Modals setModal={setModal.bind(this)} modal={modal} title=\"Usted quiere eliminar este registro!\" btons={{label:\"Eliminar\", callBackErase:callBackErase.bind(this)}} />\r\n        </>\r\n    )\r\n}","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\imagentmp\\ListImagenTmp.js",["175","176","177"],"import React, {useEffect, useState} from 'react'\r\nimport {Button, Row, Col,  Card, CardHeader, CardBody, Table } from 'reactstrap';\r\nimport {Connect} from \"../../../../../stores/actions/Connect\"\r\nimport { Image, Transformation } from 'cloudinary-react';\r\nimport { CloudinaryContext } from \"cloudinary-react\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport axios from 'axios';\r\nimport cloudinary from \"cloudinary/lib/cloudinary\";\r\n\r\n\r\n\r\ncloudinary.config({\r\n    cloud_name: 'idikydev',\r\n    api_key: '948971119485737',\r\n    api_secret: 'TuFiEnyZMNrgYsX1m4rglrqTgYo'\r\n});\r\n\r\nexport const ListImagenTmp = () => {\r\n\r\n    const [rowTable, setRowTable] = useState(<tr></tr>);\r\n\r\n    const imgDefault = (url) => {\r\n        return (<CloudinaryContext cloudName=\"idikydev\" uploadPreset=\"bobSeller\">\r\n                <Image publicId={url} > \r\n                    <Transformation width=\"50\" crop=\"scale\" /> \r\n                </Image>\r\n              </CloudinaryContext>)\r\n    }\r\n\r\n\r\n    const erase = (dataRow) => {\r\n        console.log(dataRow);\r\n        cloudinary.v2.uploader.destroy({url: \"https://res.cloudinary.com/idikydev/image/upload/v1659541030/store/brands/52462029_22.png\", public_id: \"v1659541030\"})\r\n        .then(resp => {Connect('tmpimg/list', null, 'GET', callBack.bind(this) );})\r\n        .catch(_err=> console.log(\"No se puedo realizar la eliminación de la imagen\"));\r\n    }\r\n\r\n    const callBack = (data) => {\r\n        buildTable(data);\r\n     }\r\n\r\n    const buildTable = (data) => {\r\n        const table = data.map( (row)  => {\r\n            return (\r\n            <tr key={row._id}>\r\n                <th scope=\"row\" className=\"align-items-center\">{row._id}</th>\r\n                <td>{row.source}</td>\r\n                <td>{imgDefault(row.url)}</td>\r\n                <td>\r\n                    <div>\r\n                        <DeleteIcon style={{cursor:\"pointer\"}} onClick={() => {\r\n                            erase(row);\r\n                        }}/>\r\n                    </div>\r\n                </td>\r\n            </tr>)\r\n       });\r\n       setRowTable(table);\r\n    }\r\n    \r\n    useEffect(() => { \r\n        Connect('tmpimg/list', null, 'GET', callBack.bind(this) );\r\n    },[]);\r\n\r\n    return (\r\n            <Row>\r\n                    <Col xs=\"12\" md=\"12\">\r\n                    <Row>\r\n                        <Col xs=\"12\" md=\"12\">\r\n                        <Card>\r\n                            <CardHeader>\r\n                            <Row className=\"align-items-center\">\r\n                                <Col xs=\"12\" sm=\"12\" md=\"12\">Listado de Imagenes Huerfanas</Col>\r\n                            </Row>\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                <Row className=\"align-items-center\">\r\n                                <Table striped>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Id</th>\r\n                                            <th>Origen</th>\r\n                                            <th>Imagen</th>\r\n                                            <th>Editar</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {rowTable}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    </Col>\r\n                </Row>\r\n    )\r\n}","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\suppliers\\ListSuppliers.js",["178"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport {\r\n  Button,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  Table,\r\n  Input,\r\n} from 'reactstrap'\r\nimport { Connect } from '../../../../../stores/actions/Connect'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport { addSuppliers } from '../../../../../stores/states/Suppliers'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { FormSuppliers } from './FormSuppliers'\r\nimport { Modals } from '../../../../../components/cross/modals'\r\nimport { changeFlagSuppliers } from '../../../../../stores/states/Suppliers'\r\n\r\n/**\r\n * Este Modulo lista los registros de marcas de la tabla ListBrands\r\n */\r\nexport const ListSuppliers = () => {\r\n  //Funcion dispatch que permite disparar los reducer que estan en el store\r\n  const dispatch = useDispatch()\r\n  //Con esta línea podemos recuperar información que esta almacenada en el store\r\n\r\n  const stateSuppliers = useSelector((state) => state.suppliers)\r\n\r\n  //rowTable, es un estado local que almacena la construcción Html de la tabla\r\n  const [rowTable, setRowTable] = useState(<tr></tr>)\r\n  //list, es un estado que nos ayuda como un switch para cambiar entre la pantalla de listado de marcas y el formulario\r\n\r\n  const [list, setList] = useState(true)\r\n  //data, este estado nos permite almacenar la información que de un row que esta siendo seleccionado o para ser editado o eliminado\r\n  const [data, setData] = useState({})\r\n  //modal, es un estado que nos permite activar o desactivar la visualización de un modal\r\n  const [modal, setModal] = useState(false)\r\n\r\n  //Esta funcion callback se envía en la solicitud de conección \"callBackErase\" que espera la respuesta del servidor\r\n  //que indica si un registro fue o no fue posible su eliminación\r\n  const callBackEraseDB = (data) => {\r\n    dispatch(changeFlagSuppliers(false))\r\n  }\r\n\r\n  //la función flecha callBackErase es enviada por el modulo Modal y se dispara si en este modal el usuario acepta el proceso de borrado\r\n  //llama al metodo connect solicitando eliminar un registro y se cierra el modal seteando un valor false\r\n  const callBackErase = () => {\r\n    setModal(false)\r\n    Connect(\r\n      'Suppliers/delete',\r\n      {\r\n        id: data._id,\r\n        name: data.name,\r\n        divipola: data.divipola,\r\n        zipCode: data.zipCode,\r\n        description: data.description,\r\n        source: 'suppliers',\r\n      },\r\n      'POST',\r\n      callBackEraseDB.bind(this)\r\n    )\r\n  }\r\n\r\n  //esta funcion flecha callBack, es utilizada desde el \"useEffect\" por el connect cuando se solicita todos los registros a listar de la tabla brands\r\n  //se llama a esta funcion una vez el servidor retorna los datos a connect\r\n  //Aqui realizamos el seteo de los \"data\" en el Estado global Brands a travez del dispatch llamando al reducer \"addBrands\" este se encarga de setear los\r\n  //datos en el estado y notificar a todos los modulos que pueden usar estos datos\r\n  //tambien realizamo la construcción de la tabla que listara los datos recuperados a travez del connect a el servidor\r\n  const callBack = (data) => {\r\n    // dispatch(addSuppliers(data))\r\n    //buildTable(data)\r\n    //console.log(data)\r\n  }\r\n\r\n  //Funcion flecha que abstrae la construcción de la tabla utilizando un bucle \"map\" el cual nos permite construir la misma estructura de la tabla\r\n  //de forma repetitiva y retornar a la tabla\r\n  const buildTable = (data) => {\r\n    const table = data.map((row) => {\r\n      return (\r\n        <tr key={row._id}>\r\n          <th scope='row' className='align-items-center'>\r\n            {row._id}\r\n          </th>\r\n          <td>\r\n            {row.state && <Input type='checkbox' defaultChecked={true} />}\r\n            {!row.state && <Input type='checkbox' defaultChecked={false} />}\r\n          </td>\r\n          <td>{row.name}</td>\r\n          <td>{row.divipola}</td>\r\n          <td>{row.zipCode}</td>\r\n          <td>{row.description}</td>\r\n          <td>\r\n            <div>\r\n              <EditIcon\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  setData(row)\r\n                  setList(false)\r\n                }}\r\n              />\r\n              &nbsp;&nbsp;&nbsp;&nbsp;\r\n              <DeleteIcon\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => {\r\n                  setData(row)\r\n                  setModal(true)\r\n                }}\r\n              />\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      )\r\n    })\r\n    setRowTable(table)\r\n  }\r\n\r\n  //En esta funcion hook verificamos si hay datos en el estado brands para no llamar nuevamente al servidor por esta solicitud\r\n  //si la vandera es de valor \"false\" llamaremos nuevamente al servidor para obtener los datos actualizados\r\n  //importante que la badera sea cambiada en aquellos lugares donde sabemos que los datos fueron modificados, creados o eliminados\r\n  //esto para que se pueda nuevamente realizar una recarga de los datos en el estado global de Brands\r\n\r\n  // eslint-disable-next-line react-hooks/rules-of-hooks\r\n  useEffect(() => {\r\n    if (!stateSuppliers.flagSuppliers)\r\n      Connect('suppliers/list', null, 'GET', callBack.bind(this))\r\n    else buildTable(stateSuppliers.allSuppliers)\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {\r\n        //Utilizamos list si esta es false es por que mostraremos el formulario de Brands si es true mostraremos la tabla de todos los registros de Brands\r\n        list && (\r\n          <Row>\r\n            <Col xs='12' md='12'>\r\n              <Row>\r\n                <Col xs='12' md='12'>\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <Row className='align-items-center'>\r\n                        <Col xs='10' sm='10' md='10'>\r\n                          Listado de Proveedores\r\n                        </Col>\r\n                        <Col xs='2' sm='2' md='2'>\r\n                          <Button\r\n                            size='sm'\r\n                            style={{ fontSize: 'medium' }}\r\n                            onClick={() => {\r\n                              setData({})\r\n                              setList(false)\r\n                            }}\r\n                            block\r\n                            className='float-right btn btn-success active'\r\n                          >\r\n                            Crear\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                      <Row className='align-items-center'>\r\n                        <Table striped>\r\n                          <thead>\r\n                            <tr>\r\n                              <th>Id</th>\r\n                              <th>Estado</th>\r\n                              <th>Nombre</th>\r\n                              <th>Divipola</th>\r\n                              <th>Zipcode</th>\r\n                              <th>Descripción</th>\r\n                            </tr>\r\n                          </thead>\r\n                          <tbody>{rowTable}</tbody>\r\n                        </Table>\r\n                      </Row>\r\n                    </CardBody>\r\n                  </Card>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        )\r\n      }\r\n      {\r\n        //Utilizamos list si esta es false es por que mostraremos el formulario de Brands si es true mostraremos la tabla de todos los registros de Brands\r\n        !list && <FormSuppliers setlist={setList.bind(this)} dataRow={data} />\r\n      }\r\n\r\n      {\r\n        //aqui llamamos el modulo Modals que nos sirve para verificar una decisión en este caso fue la de borrar algo\r\n      }\r\n      <Modals\r\n        setModal={setModal.bind(this)}\r\n        modal={modal}\r\n        title='Usted quiere eliminar este registro!'\r\n        btons={{ label: 'Eliminar', callBackErase: callBackErase.bind(this) }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\brands\\ListBrands.js",["179"],"import React, {useEffect, useState} from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport {Button, Row, Col,  Card, CardHeader, CardBody, Table, Input } from 'reactstrap';\r\nimport {Connect} from \"../../../../../stores/actions/Connect\"\r\nimport { Image, Transformation } from 'cloudinary-react';\r\nimport { CloudinaryContext } from \"cloudinary-react\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { addBrands } from '../../../../../stores/states/Brands';\r\nimport {useSelector} from 'react-redux';\r\nimport { FormBrands } from './FormBrands';\r\nimport { Modals } from '../../../../../components/cross/modals';\r\nimport { changeFlag } from '../../../../../stores/states/Brands';\r\n\r\n\r\n/**\r\n * Este Modulo lista los registros de marcas de la tabla ListBrands \r\n */\r\nexport const ListBrands = () => {\r\n\r\n    //Funcion dispatch que permite disparar los reducer que estan en el store \r\n    const dispatch = useDispatch();\r\n    //Con esta línea podemos recuperar información que esta almacenada en el store\r\n    const stateBrands = useSelector(state => state.brands);\r\n\r\n    //rowTable, es un estado local que almacena la construcción Html de la tabla\r\n    const [rowTable, setRowTable] = useState(<tr></tr>);\r\n    //list, es un estado que nos ayuda como un switch para cambiar entre la pantalla de listado de marcas y el formulario\r\n    const [list, setList] = useState(true);\r\n    //data, este estado nos permite almacenar la información que de un row que esta siendo seleccionado o para ser editado o eliminado\r\n    const [data, setData] = useState({});\r\n    //modal, es un estado que nos permite activar o desactivar la visualización de un modal\r\n    const [modal, setModal] = useState(false);\r\n\r\n    //Funcion flecha que construye la visualización de una imagen\r\n    const imgDefault = (url) => {\r\n        return (<CloudinaryContext cloudName=\"idikydev\" uploadPreset=\"bobSeller\">\r\n                <Image publicId={url} > \r\n                    <Transformation width=\"50\" crop=\"scale\" /> \r\n                </Image>\r\n              </CloudinaryContext>)\r\n    }\r\n\r\n    //Esta funcion callback se envía en la solicitud de conección \"callBackErase\" que espera la respuesta del servidor \r\n    //que indica si un registro fue o no fue posible su eliminación\r\n    const callBackEraseDB  = (data) => {\r\n        dispatch(changeFlag(false));\r\n    }\r\n\r\n    //la función flecha callBackErase es enviada por el modulo Modal y se dispara si en este modal el usuario acepta el proceso de borrado\r\n    //llama al metodo connect solicitando eliminar un registro y se cierra el modal seteando un valor false\r\n    const callBackErase = () => {\r\n        setModal(false);\r\n        Connect('brands/delete', {id:data._id, urlIcon:data.urlIcon, urlImage:data.urlImage, source:\"brands\"}, 'POST', callBackEraseDB.bind(this) );\r\n    }\r\n\r\n    //esta funcion flecha callBack, es utilizada desde el \"useEffect\" por el connect cuando se solicita todos los registros a listar de la tabla brands\r\n    //se llama a esta funcion una vez el servidor retorna los datos a connect\r\n    //Aqui realizamos el seteo de los \"data\" en el Estado global Brands a travez del dispatch llamando al reducer \"addBrands\" este se encarga de setear los \r\n    //datos en el estado y notificar a todos los modulos que pueden usar estos datos\r\n    //tambien realizamo la construcción de la tabla que listara los datos recuperados a travez del connect a el servidor\r\n    const callBack = (data) => {\r\n        dispatch(addBrands(data));\r\n        buildTable(data);\r\n     }\r\n\r\n    //Funcion flecha que abstrae la construcción de la tabla utilizando un bucle \"map\" el cual nos permite construir la misma estructura de la tabla \r\n    //de forma repetitiva y retornar a la tabla\r\n    const buildTable = (data) => {\r\n        const table = data.map( (row)  => {\r\n            return (\r\n            <tr key={row._id}>\r\n                <th scope=\"row\" className=\"align-items-center\">{row._id}</th>\r\n                <td>\r\n                    {(row.state)&&<Input type=\"checkbox\"  defaultChecked={true}/>}\r\n                    {(!row.state)&&<Input type=\"checkbox\" defaultChecked={false}/>}\r\n                </td>\r\n                <td>{row.name}</td>\r\n                <td>{row.description}</td>\r\n                <td>{imgDefault(row.urlIcon)}</td>\r\n                <td>{imgDefault(row.urlImage)}</td>\r\n                <td>\r\n                    <div>\r\n                        <EditIcon style={{cursor:\"pointer\"}} onClick={() => {\r\n                            setData(row);\r\n                            setList(false);\r\n                        }}/>\r\n                        &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        <DeleteIcon style={{cursor:\"pointer\"}} onClick={() => {\r\n                            setData(row);\r\n                            setModal(true);\r\n                        }}/>\r\n                    </div>\r\n                </td>\r\n            </tr>)\r\n       });\r\n       setRowTable(table);\r\n    }\r\n    \r\n    //En esta funcion hook verificamos si hay datos en el estado brands para no llamar nuevamente al servidor por esta solicitud\r\n    //si la vandera es de valor \"false\" llamaremos nuevamente al servidor para obtener los datos actualizados\r\n    //importante que la badera sea cambiada en aquellos lugares donde sabemos que los datos fueron modificados, creados o eliminados \r\n    //esto para que se pueda nuevamente realizar una recarga de los datos en el estado global de Brands\r\n    useEffect(() => {\r\n        if(!stateBrands.flagBrands) Connect('brands/list', null, 'GET', callBack.bind(this) );\r\n        else buildTable(stateBrands.allBrands);\r\n    },[stateBrands.flagBrands]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                //Utilizamos list si esta es false es por que mostraremos el formulario de Brands si es true mostraremos la tabla de todos los registros de Brands\r\n                (list)\r\n                &&<Row>\r\n                    <Col xs=\"12\" md=\"12\">\r\n                    <Row>\r\n                        <Col xs=\"12\" md=\"12\">\r\n                        <Card>\r\n                            <CardHeader>\r\n                            <Row className=\"align-items-center\">\r\n                                <Col xs=\"10\" sm=\"10\" md=\"10\">Listado de Marcas</Col>\r\n                                <Col xs=\"2\" sm=\"2\" md=\"2\">\r\n                                <Button size=\"sm\" style={{fontSize:\"medium\"}} onClick={() => {\r\n                                    setData({});\r\n                                    setList(false);\r\n                                }} block className=\"float-right btn btn-success active\">\r\n                                    Crear\r\n                                </Button>\r\n                                </Col>\r\n                            </Row>\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                <Row className=\"align-items-center\">\r\n                                <Table striped>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Id</th>\r\n                                            <th>Estado</th>\r\n                                            <th>Nombre</th>\r\n                                            <th>Descripción</th>\r\n                                            <th>Icon</th>\r\n                                            <th>Imagen</th>\r\n                                            <th>Editar</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {rowTable}\r\n                                    </tbody>\r\n                                </Table>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                //Utilizamos list si esta es false es por que mostraremos el formulario de Brands si es true mostraremos la tabla de todos los registros de Brands\r\n                (!list)\r\n                &&<FormBrands setlist={setList.bind(this)} dataRow={data}/>\r\n            }\r\n        \r\n            {\r\n                //aqui llamamos el modulo Modals que nos sirve para verificar una decisión en este caso fue la de borrar algo \r\n            }\r\n            <Modals setModal={setModal.bind(this)} modal={modal} title=\"Usted quiere eliminar este registro!\" btons={{label:\"Eliminar\", callBackErase:callBackErase.bind(this)}} />\r\n        </>\r\n    )\r\n}","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\MobilMenu.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Email.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Alert.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Account.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\top_bar\\Title.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\brands\\FormBrands.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\modals.js",["180"],"import React from 'react';\r\nimport {Modal,  ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\r\n\r\nexport const Modals = ({setModal, modal, title, btons}) => {\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={() => setModal(!modal)} zIndex=\"1500\" >\r\n            <ModalHeader toggle={() => setModal(!modal)} >\r\n                {title}\r\n            </ModalHeader>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={() => btons.callBackErase()}>{btons.label}</Button>{' '}\r\n            <Button color=\"secondary\" onClick={() => setModal(!modal)}>Cancelar</Button>\r\n            </ModalFooter>\r\n        </Modal>\r\n    )\r\n}","C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\upload.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\cloudinary.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\suppliers\\FormSuppliers.js",["181"],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\layout\\component_admin\\content\\store\\categories\\FormCategories.js",[],"C:\\Users\\57300\\Documents\\GitHub\\IDIKY_BACKOFFICE\\src\\components\\cross\\divipola.js",["182","183","184"],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":10,"column":9,"nodeType":"191","messageId":"192","endLine":10,"endColumn":18},{"ruleId":"189","severity":1,"message":"193","line":55,"column":13,"nodeType":"191","messageId":"192","endLine":55,"endColumn":33},{"ruleId":"189","severity":1,"message":"194","line":3,"column":63,"nodeType":"191","messageId":"192","endLine":3,"endColumn":68},{"ruleId":"195","severity":1,"message":"196","line":77,"column":7,"nodeType":"197","endLine":77,"endColumn":39,"suggestions":"198"},{"ruleId":"189","severity":1,"message":"199","line":2,"column":9,"nodeType":"191","messageId":"192","endLine":2,"endColumn":15},{"ruleId":"189","severity":1,"message":"200","line":7,"column":8,"nodeType":"191","messageId":"192","endLine":7,"endColumn":13},{"ruleId":"195","severity":1,"message":"201","line":63,"column":7,"nodeType":"197","endLine":63,"endColumn":9,"suggestions":"202"},{"ruleId":"189","severity":1,"message":"203","line":16,"column":10,"nodeType":"191","messageId":"192","endLine":16,"endColumn":22},{"ruleId":"195","severity":1,"message":"204","line":107,"column":7,"nodeType":"197","endLine":107,"endColumn":31,"suggestions":"205"},{"ruleId":"189","severity":1,"message":"206","line":2,"column":30,"nodeType":"191","messageId":"192","endLine":2,"endColumn":39},{"ruleId":"189","severity":1,"message":"207","line":23,"column":9,"nodeType":"191","messageId":"192","endLine":23,"endColumn":17},{"ruleId":"208","severity":1,"message":"209","line":19,"column":47,"nodeType":"210","messageId":"211","endLine":19,"endColumn":49},{"ruleId":"208","severity":1,"message":"209","line":46,"column":38,"nodeType":"210","messageId":"211","endLine":46,"endColumn":40},{"ruleId":"195","severity":1,"message":"212","line":84,"column":7,"nodeType":"197","endLine":84,"endColumn":9,"suggestions":"213"},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"no-unused-vars","'MobilMenu' is defined but never used.","Identifier","unusedVar","'handleMobileMenuOpen' is assigned a value but never used.","'Input' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'buildTable', 'callBack', and 'stateCategories.allCategories'. Either include them or remove the dependency array.","ArrayExpression",["216"],"'Button' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array.",["217"],"'addSuppliers' is defined but never used.","React Hook useEffect has missing dependencies: 'buildTable', 'callBack', and 'stateBrands.allBrands'. Either include them or remove the dependency array.",["218"],"'ModalBody' is defined but never used.","'callBack' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'defaultCiti', 'dispatch', 'stateDivipola.allDivipola', 'stateSelet', and 'statesList'. Either include them or remove the dependency array.",["219"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},"Update the dependencies array to be: [buildTable, callBack, stateCategories.allCategories, stateCategories.flagCategories]",{"range":"228","text":"229"},"Update the dependencies array to be: [callBack]",{"range":"230","text":"231"},"Update the dependencies array to be: [buildTable, callBack, stateBrands.allBrands, stateBrands.flagBrands]",{"range":"232","text":"233"},"Update the dependencies array to be: [defaultCiti, dispatch, stateDivipola.allDivipola, stateSelet, statesList]",{"range":"234","text":"235"},[3016,3048],"[buildTable, callBack, stateCategories.allCategories, stateCategories.flagCategories]",[2195,2197],"[callBack]",[5667,5691],"[buildTable, callBack, stateBrands.allBrands, stateBrands.flagBrands]",[3409,3411],"[defaultCiti, dispatch, stateDivipola.allDivipola, stateSelet, statesList]"]